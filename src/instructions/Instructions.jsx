import { useState, useRef } from 'react';
import './Instructions.css';
import Step from './Step';
import Navigation from '../navigation/Navigation';

// Iconos (en negro)
import giftIcon from "../assets/icons/gift-black.svg";
import userIcon from "../assets/icons/user-black.svg";
import friendsIcon from "../assets/icons/friends-black.svg";
import heartIcon from "../assets/icons/heart-black.svg";
import homeIcon from "../assets/icons/home-black.svg";
import infoIcon from "../assets/icons/info-black.svg";
import shuffleIcon from "../assets/icons/shuffle-black.svg";
import addIcon from "../assets/icons/add-black.svg";
import giftHubLogo from "/GiftHub_logo.png";

function Instructions({ inLanding }) {
    const [currentStep, setCurrentStep] = useState(0); // Comienza en el paso 0, "bienvenida"

    const progressBarRef = useRef(null);

    // Funci√≥n para cambiar el currentStep
    const goToStep = (step) => {
        setCurrentStep(step);
    };

    const steps = [
        {
            title: '¬°Bienvenid@! üéâ',
            subtitle: 'Paso 0: Te damos la bienvenida',
            instructions: '¬°Estamos felices de que hayas encontrado nuestra aplicaci√≥n! A continuaci√≥n te ense√±aremos paso a paso c√≥mo hacer uso de ella.',
            icons: [giftHubLogo],
            indication: "Haz click en siguiente para comenzar esta gu√≠a. Tambi√©n puedes apretar la barra de progreso para saltar entre los pasos."
        },
        {
            title: 'Cuenta üéÅ',
            subtitle: 'Paso 1: Crea tu propia cuenta',
            instructions: 'Para poder empezar a hacer uso de la aplicaci√≥n, aseg√∫rate de registrarse, y posteriormente iniciar sesi√≥n. ¬°As√≠ podr√°s empezar a crear tus propias listas de deseos y m√°s!',
            icons: [userIcon],
            indication: "Encuentra el √≠cono de perfil en la barra de navegaci√≥n a la derecha."
        },
        {
            title: 'Navegaci√≥n üß≠',
            subtitle: 'Paso 2: Conoce la barra de navegaci√≥n',
            instructions: 'A trav√©s de la barra de navegaci√≥n, tienes la posibilidad de acceder a la p√°gina de inicio, a la p√°gina de deseos, a esta p√°gina de instrucciones, y a tu perfil.',
            icons: [homeIcon, heartIcon, infoIcon, userIcon],
            indication: "Puedes acceder a todas las p√°ginas a trav√©s de sus √≠conos en la barra de navegaci√≥n."
        },
        {
            title: 'Lista de deseos ‚ù§Ô∏è',
            subtitle: 'Paso 3: Conoce y disfruta tu lista de deseos',
            instructions: 'En la p√°gina de deseos, se encuentra tu propia lista de deseos, en la cu√°l puedes a√±adir tus regalos m√°s deseados. Guarda los regalos en tu lista para que tus amigos sepan qu√© es lo que deseas, y te lo regalen ;)',
            icons: [heartIcon, addIcon],
            indication: "Encuentra tu lista de deseos siguiendo este √≠cono hacia la p√°gina de deseos."
        },
        {
            title: 'Amigos üéÇ',
            subtitle: 'Paso 4: A√±ade a tus usuarios amigos',
            instructions: '¬°A√±ade a todos tus amigos! Para que as√≠ entre ustedes conozcan los deseos del otro. Con su nombre de usuario, puedes a√±adirlos desde la p√°gina de deseos.',
            icons: [heartIcon, friendsIcon],
            indication: "Encuentra las listas de deseos de tus amigos desde la p√°gina de deseos, seleccionando la vista de amigos."
        },
        {
            title: 'Regala üéÄ',
            subtitle: 'Paso 5: Reserva lo que quieres regalar',
            instructions: 'Explora las listas de deseos de tus amigos, y cuando encuentres el regalo ideal para darle, ¬°Res√©rvalo! As√≠ nadie m√°s que t√∫ llegar√° con ese regalo √∫nico y especial.',
            icons: [friendsIcon, giftIcon],
            indication: "Encontrar√°s este √≠cono debajo de los deseos de tus amigos, haz click en √©l para reservar."
        },
        {
            title: 'Amigo secreto üîí',
            subtitle: 'Paso 6: Organiza un amigo secreto',
            instructions: 'Organiza un amigo secreto con tus amigos, de manera que a cada uno se le asigne un regalo de la lista de deseos de otro. Todos podr√°n sorprenderse con cu√°l es el regalo de su wishlist que le llegar√°, ¬°Y qui√©n se lo dar√°!',
            icons: [friendsIcon, shuffleIcon],
            indication: "Encuentra este √≠cono en el modo amigos de la p√°gina de deseos, haz click en √©l para comenzar a organizar el amigo secreto."
        }
    ];

    const totalSteps = steps.length - 1; // No se considera el paso 0

    // Funci√≥n que calcula el progreso (porcentaje) con respecto a los pasos totales
    const calculateCompletionPercentage = () => {
        return (currentStep / totalSteps) * 100;
    };

    const handleProgressBarClick = (e) => {
        // Recupero el elemento de la referencia
        const progressBar = progressBarRef.current;
        // Click en el eje X relativo a la progress-bar
        const clickX = e.clientX - progressBar.getBoundingClientRect().left;
        // (Click considerando ventana completa, menos la posici√≥n de inicio de la progress-bar)
        const progressBarWidth = progressBar.clientWidth;

        // C√°lculo del paso deseado
        const wantedStep = Math.ceil((clickX / progressBarWidth) * totalSteps);
        // (Se elige el techo (ceil), para simular el click a ese paso)

        // Modifica el currentStep
        goToStep(wantedStep);

        // IMPORTANTE: Se est√° haciendo el c√°lculo con respecto a progress-bar, no progress
        // (De lo contrario no se estar√≠a haciendo un retorno correcto)
    };

    return (
        <>
            {!inLanding && <>
                <Navigation />
            </>}
            <div className="instructions-container" style={{ margin: inLanding ? "0 auto" : "150px 10% 20px 10%" }}>
                <div
                    className="progress-bar"
                    ref={progressBarRef} // Este elemento es el referenciado por progressBarRef
                    onClick={handleProgressBarClick} // Se gatilla la funci√≥n
                >
                    <div
                        className="progress"
                        // El ancho se ajustar√° seg√∫n el progreso
                        style={{ width: `${calculateCompletionPercentage()}%` }}
                    ></div>
                </div>

                <div className="instructions-content">
                    {steps.map((step, index) => (
                        <Step
                            key={index}
                            id={index}
                            title={step.title}
                            subtitle={step.subtitle}
                            instructions={step.instructions}
                            icons={step.icons}
                            indication={step.indication}
                            current={currentStep}
                        />
                    ))}
                </div>

                <div className="controls">
                    {/* El bot√≥n para retroceder se muestra desde el 1er paso */}
                    {currentStep > 0 && (
                        <button onClick={() => goToStep(currentStep - 1)}>Anterior</button>
                    )}

                    {/* El bot√≥n para avanzar se muestra hasta antes del √∫ltimo paso */}
                    {currentStep < totalSteps && (
                        <button onClick={() => goToStep(currentStep + 1)}>Siguiente</button>
                    )}
                </div>
            </div>
        </>
    );
}

export default Instructions;
